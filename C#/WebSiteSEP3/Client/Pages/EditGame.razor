@page "/EditGame/{gameNameToEdit}"
@using Client.Data
@using Client.Models
@inject IGameService _gameService;
<h3>Edit Game</h3>

@attribute [Authorize(Policy = "Administrator")]
@inject NavigationManager _navigationManager;
<AuthorizeView Context="Auth" Policy="Administrator">
    
    @if (gameToEdit != null)
    {
        <EditForm Model="gameToEdit">
            <DataAnnotationsValidator/>
            <ValidationSummary/>
            <div class="form-group">
                Game Name:<br/>
                <InputTextArea rows="4" @bind-Value="gameToEdit.GameName"/>
            </div>
            <div class="form-group">
                Game Price:<br/>
                <InputNumber @bind-Value="gameToEdit.Price"/>
            </div>
            <div class="form-group">
                Game Photo URL:<br/>
                <InputTextArea rows="5" @bind-Value="gameToEdit.Photo"/>
            </div>
            <div class="form-group">
                ESBR Rating:<br/>
                <InputTextArea rows="3" @bind-Value="gameToEdit.ESRB"/>
            </div>
            <div class="form-group">
                IGN Rating:<br/>
                <InputNumber @bind-Value="gameToEdit.IGN"/>
            </div>
            <div class="form-group">
                Description:<br/>
                <InputTextArea cols="50" rows="3" @bind-Value="gameToEdit.Description"/>
            </div>
            <div class="form-group">
                Specifications:<br/>
                <InputTextArea cols="50" rows="3" @bind-Value="gameToEdit.Specifications"/>
            </div>
            <div class="form-group">
                Release Date:<br/>
                <InputDate rows="1" @bind-Value:format="yyyy-MM-dd" @bind-Value="dateTime" />
            </div>
            <p class="actions">
                <button class="btn btn-outline-dark" type="submit" @onclick="editGameAsync">Edit Game</button>
            </p>


        </EditForm>
    }
</AuthorizeView>

@code {
    private Game gameToEdit = new Game();
    [Parameter]
    public string gameNameToEdit { get; set; }
    private string errorMessage = "";
    private DateTime dateTime;
    private Game game;
    
    protected override async Task OnInitializedAsync()
    {
        try
        {
            gameToEdit = await _gameService.getGameAsync(gameNameToEdit);
            dateTime = new DateTime(Convert.ToInt16(gameToEdit.ReleaseDate.Substring(0, 4)), Convert.ToInt16(gameToEdit.ReleaseDate.Substring(5, 2)), Convert.ToInt16(gameToEdit.ReleaseDate.Substring(8, 2)));
        }
        catch (Exception e)
        {
            Console.WriteLine(e);
            errorMessage = e.Message;
        }
    }

    private async Task editGameAsync()
    {
        try
        {
            gameToEdit.ReleaseDate = dateTime.Year + "-" + dateTime.Month + "-" + dateTime.Day;
            game = await _gameService.editGameAsync(gameToEdit);
            _navigationManager.NavigateTo("/");
        }
        catch (Exception e)
        {
            Console.WriteLine(e);
            errorMessage = e.Message;
        }
    }
}