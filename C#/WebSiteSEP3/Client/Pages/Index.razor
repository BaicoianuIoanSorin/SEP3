@* @page "/" *@
@* @inject IJSRuntime JS *@
@* @inject AuthenticationStateProvider AuthenticationStateProvider *@
@* @inject IGameService _gameService; *@
@* @using LoginComponent *@
@* @using Client.Data *@
@* @using Client.Models *@
@* <AuthorizeView> *@
@*     <Authorized> *@
@*         Hi, @context.User.Identity.Name *@
@*         <div id="paypal-button-container"></div> *@
@*     </Authorized> *@
@*     <NotAuthorized> *@
@*         <Login/> *@
@*     </NotAuthorized> *@
@* </AuthorizeView> *@
@* *@
@* *@
@* @code *@
@* { *@
@*     // [Inject] *@
@*     // IJSRuntime _jsRuntime { get; set; } *@
@* *@
@*     // double value; *@
@*     double a = 9.99; *@
@* *@
@*     protected override async Task OnInitializedAsync() *@
@*     { *@
@*         // Game Game1 = await _gameService.getGameAsync("Cyberpunk 2077"); *@
@*         // value = Game1.Price; *@
@*     } *@
@* *@
@*     protected override async Task OnAfterRenderAsync(bool firstRender) *@
@*     { *@
@*         if (firstRender) *@
@*         { *@
@*             await JS.InvokeVoidAsync("LoadButtonPaypal", a); *@
@*         } *@
@*     } *@
@* } *@

@page "/"
@* @inject IJSRuntime JS *@
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject IGameService _gameService
@inject NavigationManager NavigationManager
@using LoginComponent
@using PaypalComponent
@using Client.Data
@using Client.Models
@using System.IO
@using System.Net
@using System;
@using System.Drawing;
@using System.Net.Mime
@using Microsoft.AspNetCore.Mvc.Diagnostics
<AuthorizeView>
    <Authorized>
        <div class="text-info">
            <h1>Hi, @context.User.Identity.Name!</h1>
        </div>

        <div class="container row align-top float-right">
            <div class="col-lg-4">
                <input type="text" alt="search for game" @bind-value="searchedGameName" style="width: 150px"/>
                <button class="btn-outline-primary" @onclick="@(() => FilterByGameName(searchedGameName))"><i class="oi oi-eye"/></button>
            </div>
        </div>
        
        @if (errorMessage.Equals(""))
        {
            <div class="text-info">
                @if (searchedGameName == null)
                {
                    <h1>Here are some games that might interest you</h1>
                }
                else
                {
                    <h1>Results for @searchedGameName</h1>
                }
            </div>
            <div class="container-fluid row">
                @foreach (var game in games.GamesStack)
                    {
                        <div class="card col-sm-3">
                            <a asp-page="/order" asp-route-id="@game.GameId" title="Order @game.GameName">
                                <div class="productInfo">
                                    <h3>@game.GameName</h3>
                                    <img class="product-image img-fluid img-thumbnail" src="@GetImage(game)" alt="Image of @game.GameName"/>
                                </div>
                            </a>
                            <div>
                                <p class="price float-left ">$@string.Format("{0:f}", Math.Round(game.Price, 2).ToString())</p>
                                @* TODO <button class="btn btn-sm btn-dark order-button float-right" @onclick="@(() => CheckOutNow(game.GameName))"> *@
                                @*     Order Now *@
                                @* </button> *@
                                <button class="btn btn-sm btn-dark order-button float-right">Order Now (Test)</button>
                            </div>
                            <br/>
                        </div>
                    }
            </div>
        }
        else
        {
            <div class="text-info">
                <h1>@errorMessage</h1>
            </div>
        }
        <!-- TODO Paypal services will be changed as a redirect button -->
        @* <Paypal/> *@


        <nav class="pagenavigation" aria-label="page navigation">
            <ul class="pagination">
                @if (pageNr != 0)
                {
                    <li class="page-item">
                        <a class="page-link" @onclick="PreviousPage">Previous</a>
                    </li>
                }
                else if(pageNr == 0 || errorMessage.Equals(""))
                {
                    <li class="page-item disabled">
                        <a class="page-link" @onclick="PreviousPage">Previous</a>
                    </li>
                }
                @if (errorMessage.Equals(""))
                { <li class="page-item">
                      <a class="page-link" @onclick="NextPage">Next</a>
                  </li>
                    
                }
                else
                {
                    <li class="page-item disabled">
                        <a class="page-link" @onclick="NextPage">Next</a>
                    </li>
                }

            </ul>
        </nav>
    </Authorized>
    <NotAuthorized>
        <Login/>
    </NotAuthorized>
</AuthorizeView>


@code
{
    private GameCluster games;
    private int pageNr = 0;
    private string errorMessage;

    private string? searchedGameName;

    protected override async Task OnInitializedAsync()
    {
        errorMessage = "";
        try
        {
            games = await _gameService.getGameClusterAsync(pageNr);
            SaveImageIntoClient(games);
        }
        catch (Exception e)
        {
            errorMessage = e.Message;
        }
    }


    // TODO private void CheckOutNow(string gameName)
    // {
    //     NavigationManager.NavigateTo($"/Paypal/{gameName}");
    //
    // }

    private async Task PreviousPage()
    {
        errorMessage = "";
        try
        {
            pageNr--;
            games = await _gameService.getGameClusterAsync(pageNr);
            SaveImageIntoClient(games);
        }
        catch (Exception e)
        {
            errorMessage = "There are no games on this page..";
        }
        
    }

    private async Task NextPage()
    {
        errorMessage = "";
        try
        {
            pageNr++;
            games = await _gameService.getGameClusterAsync(pageNr);
            SaveImageIntoClient(games);
        }
        catch (Exception e)
        {
            await PreviousPage();
            pageNr++;
            errorMessage = "There are no games on this page..";
        }
    }

    public void SaveImageIntoClient(GameCluster gameCluster)
    {
        {
            foreach (var game in gameCluster.GamesStack)
            {
                using (WebClient webClient = new WebClient())
                {
                    byte[] dataArr = webClient.DownloadData(game.Photo);
                    File.WriteAllBytes($@"wwwroot/Images/Games/{game.GameName}.png", dataArr);
                }
            }
        }
    }

    public string GetImage(Game game)
    {
        return $"Images/Games/{game.GameName}.png";
    }
    
    private async Task FilterByGameName(string searchedGames)
    {
        
        errorMessage = "";
        try
        {
            if (searchedGames != null)
            {
                games = await _gameService.getSearchAsync(searchedGames);
                SaveImageIntoClient(games);
                if (games.GamesStack.Count == 0)
                {
                    errorMessage = $"There are no games for {searchedGames}";
                }
            }
            else
            {
                games = await _gameService.getGameClusterAsync(pageNr);
                SaveImageIntoClient(games);
            }
        }
        catch (Exception e)
        {
            errorMessage = $"There are no games for {searchedGames}";
        }
    }
}