@* @page "/" *@
@* @inject IJSRuntime JS *@
@* @inject AuthenticationStateProvider AuthenticationStateProvider *@
@* @inject IGameService _gameService; *@
@* @using LoginComponent *@
@* @using Client.Data *@
@* @using Client.Models *@
@* <AuthorizeView> *@
@*     <Authorized> *@
@*         Hi, @context.User.Identity.Name *@
@*         <div id="paypal-button-container"></div> *@
@*     </Authorized> *@
@*     <NotAuthorized> *@
@*         <Login/> *@
@*     </NotAuthorized> *@
@* </AuthorizeView> *@
@* *@
@* *@
@* @code *@
@* { *@
@*     // [Inject] *@
@*     // IJSRuntime _jsRuntime { get; set; } *@
@* *@
@*     // double value; *@
@*     double a = 9.99; *@
@* *@
@*     protected override async Task OnInitializedAsync() *@
@*     { *@
@*         // Game Game1 = await _gameService.getGameAsync("Cyberpunk 2077"); *@
@*         // value = Game1.Price; *@
@*     } *@
@* *@
@*     protected override async Task OnAfterRenderAsync(bool firstRender) *@
@*     { *@
@*         if (firstRender) *@
@*         { *@
@*             await JS.InvokeVoidAsync("LoadButtonPaypal", a); *@
@*         } *@
@*     } *@
@* } *@

@page "/"
@* @inject IJSRuntime JS *@
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject IGameService _gameService
@inject NavigationManager NavigationManager
@using LoginComponent
@using PaypalComponent
@using Client.Data
@using Client.Models
<AuthorizeView>
    <Authorized>
<h1 class="text-info">
            Hi, @context.User.Identity.Name! <br/>
            Here are some games that might interest you...
        </h1>
        <!-- TODO Paypal services will be changed as a redirect button -->@* <Paypal/> *@

        <div class="container-fluid row">
            @foreach (var game in games.GamesStack)
            {
                <div class="card col-sm-3">
        
        
                    <a asp-page="/order" asp-route-id="@game.GameId" title="Order @game.GameName">
                        <div class="productInfo">
                            <h3>@game.GameName</h3>
                            <img class="product-image img-fluid img-thumbnail" src="Images/Products/Thumbnails/@game.Photo"
                                 alt="Image of @game.GameName"/>
                        </div>
                    </a>
                    <div>
                        <p class="price float-left ">$@string.Format("{0:f}", Math.Round(game.Price, 2).ToString())</p>
                        @* TODO <button class="btn btn-sm btn-dark order-button float-right" @onclick="@(() => CheckOutNow(game.GameName))"> *@
                        @*     Order Now *@
                        @* </button> *@
                        <button class="btn btn-sm btn-dark order-button float-right">Order Now (Test)</button>
                    </div>
                    <br/>
                </div>
            }
        </div>
        
                <nav class="pagenavigation" aria-label="page navigation">
            <ul class="pagination">
                      @if (pageNr != 0)
                {
                    <li class="page-item">
                        <a class="page-link" @onclick="PreviousPage">Previous</a>
                    </li>
                }
                else
                {
                    <li class="page-item disabled">
                        <a class="page-link" @onclick="PreviousPage">Previous</a>
                    </li>
                }
                <li class="page-item">
                    <a class="page-link" @onclick="NextPage">Next</a>
                </li>
            </ul>
        </nav>
    </Authorized>
    <NotAuthorized>
        <Login/>
    </NotAuthorized>
</AuthorizeView>


@code
{
    private GameCluster games;
        private int pageNr = 0;

    protected override async Task OnInitializedAsync()
    {
        games = await _gameService.getGameClusterAsync(pageNr);
    }


    // TODO private void CheckOutNow(string gameName)
    // {
    //     NavigationManager.NavigateTo($"/Paypal/{gameName}");
    //
    // }

    private async Task PreviousPage()
    {
        pageNr--;
        games = await _gameService.getGameClusterAsync(pageNr);
    }

    private async Task NextPage()
    {
        pageNr++;
        games = await _gameService.getGameClusterAsync(pageNr);
    }
}